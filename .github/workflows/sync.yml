# -*- coding: utf-8 -*-
# sync.py — orchestrateur pour pronote_playwright_to_family_mo.py
# - Ecrit credentials.json / token.json depuis les variables d'environnement si presentes
# - (Re)met pip en place si absent, installe les dependances + Playwright Chromium
# - Lance run() du module pronote_playwright_to_family_mo

import os
import sys
import subprocess
import traceback
from pathlib import Path

ROOT = Path(__file__).resolve().parent
PY = sys.executable
SCREEN_DIR = ROOT / "screenshots"

ENV_PRINT_KEYS = [
    "ENT_URL", "PRONOTE_URL", "CALENDAR_ID", "HEADFUL",
    "TIMETABLE_PRE_SELECTOR", "TIMETABLE_SELECTOR", "TIMETABLE_FRAME",
    "WEEK_TAB_TEMPLATE", "FETCH_WEEKS_FROM", "WEEKS_TO_FETCH",
    "WAIT_AFTER_NAV_MS", "CLICK_TOUT_VOIR", "DEBUG"
]

REQS = [
    "playwright",
    "google-api-python-client",
    "google-auth-httplib2",
    "google-auth-oauthlib",
    "python-dateutil",
]

def log(msg):
    print(msg, flush=True)

def run_cmd(args, check=True):
    log("[CMD] " + " ".join(args))
    return subprocess.run(args, check=check)

def ensure_dir(p):
    p.mkdir(parents=True, exist_ok=True)

def write_secret_file(filename, env_var):
    val = os.getenv(env_var, "")
    if not val:
        return False
    try:
        (ROOT / filename).write_text(val, encoding="utf-8")
        log("[OK] %s ecrit depuis $%s" % (filename, env_var))
        return True
    except Exception as e:
        log("[WARN] impossible d'ecrire %s: %s" % (filename, e))
        return False

def ensure_pip():
    try:
        run_cmd([PY, "-m", "pip", "--version"], check=True)
        log("[OK] pip deja present")
        return
    except Exception:
        log("[INFO] pip absent — tentative ensurepip")
    try:
        run_cmd([PY, "-m", "ensurepip", "--upgrade"], check=True)
        run_cmd([PY, "-m", "pip", "install", "-U", "pip", "setuptools", "wheel"], check=True)
        log("[OK] pip (re)installe")
    except Exception as e:
        log("[WARN] echec ensurepip/pip upgrade: %s" % e)

def install_requirements():
    for pkg in REQS:
        run_cmd([PY, "-m", "pip", "install", "-U", pkg], check=True)

def ensure_playwright_browsers():
    run_cmd([PY, "-m", "playwright", "install", "chromium"], check=True)
    log("[OK] Playwright Chromium installe")

def print_env_overview():
    log("[ENV] variables utiles :")
    for k in ENV_PRINT_KEYS:
        v = os.getenv(k)
        if v is None:
            log("  - %s=<absent>" % k)
        else:
            log("  - %s=%s" % (k, v))
    for secret in ("PRONOTE_USER", "PRONOTE_PASS", "GCAL_CLIENT_SECRET", "GCAL_TOKEN_JSON"):
        log("  - %s=%s" % (secret, "<set>" if os.getenv(secret) else "<absent>"))

def maybe_print_public_ip():
    try:
        import urllib.request, json as _json
        ip = _json.loads(urllib.request.urlopen("https://api.ipify.org?format=json", timeout=5).read())["ip"]
        log("[NET] IP publique du job: %s" % ip)
    except Exception as e:
        log("[NET] IP publique non recuperee: %s" % e)

def main():
    ensure_dir(SCREEN_DIR)
    log("[PY] %s" % PY)
    log("[PY] %s" % sys.version)
    print_env_overview()
    maybe_print_public_ip()

    wrote_creds = write_secret_file("credentials.json", "GCAL_CLIENT_SECRET")
    wrote_token = write_secret_file("token.json", "GCAL_TOKEN_JSON")
    if not (ROOT / "credentials.json").exists() and not wrote_creds:
        log("[WARN] credentials.json introuvable et $GCAL_CLIENT_SECRET absent.")
    if not (ROOT / "token.json").exists():
        log("[INFO] token.json non present (normal si premiere execution)")

    ensure_pip()
    install_requirements()
    ensure_playwright_browsers()

    try:
        import pronote_playwright_to_family_mo as sync_mod
    except Exception as e:
        log("[FATAL] import pronote_playwright_to_family_mo KO: %s" % e)
        traceback.print_exc()
        sys.exit(1)

    try:
        sync_mod.run()
    except SystemExit as e:
        rc = int(getattr(e, "code", 1) or 1)
        log("[FATAL] run() a leve SystemExit(%s)" % rc)
        sys.exit(rc)
    except Exception as e:
        log("[FATAL] Exception dans run(): %s" % e)
        traceback.print_exc()
        sys.exit(1)

    log("[DONE] sync terminee sans exception")

if __name__ == "__main__":
    try:
        main()
    except Exception as ex:
        log("[FATAL] sync.py a echoue: %s" % ex)
        traceback.print_exc()
        sys.exit(1)
