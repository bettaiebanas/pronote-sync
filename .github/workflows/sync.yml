name: pronote-to-family-mo

on:
  workflow_dispatch:
  schedule:
    - cron: "7 4 * * 1-5"   # jours ouvrés 04:07 UTC (modifie si besoin)

jobs:
  sync:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [self-hosted]   # mets "windows-latest" pour tester sur runner GitHub

    env:
      ENT_URL: ${{ vars.ENT_URL }}
      PRONOTE_URL: ${{ vars.PRONOTE_URL }}
      PRONOTE_USER: ${{ secrets.PRONOTE_USER }}
      PRONOTE_PASS: ${{ secrets.PRONOTE_PASS }}
      CAL_ID: family
      WEEKS: "4"
      HEADFUL: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # ---------- FICHIERS OAUTH depuis les secrets ----------
      - name: Recreate OAuth files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-Content -Path credentials.json -Value $env:GCAL_CLIENT_SECRET -NoNewline
          Set-Content -Path token.json        -Value $env:GCAL_TOKEN_JSON    -NoNewline
        env:
          GCAL_CLIENT_SECRET: ${{ secrets.GCAL_CLIENT_SECRET }}
          GCAL_TOKEN_JSON: ${{ secrets.GCAL_TOKEN_JSON }}

      - name: Recreate OAuth files (Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          printf '%s' "${GCAL_CLIENT_SECRET}" > credentials.json
          printf '%s' "${GCAL_TOKEN_JSON}"  > token.json
        env:
          GCAL_CLIENT_SECRET: ${{ secrets.GCAL_CLIENT_SECRET }}
          GCAL_TOKEN_JSON: ${{ secrets.GCAL_TOKEN_JSON }}

      # ---------- DEPENDANCES ----------
      - name: Install deps (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install -U pip
          python -m pip install --upgrade `
            playwright `
            google-api-python-client `
            google-auth-httplib2 `
            google-auth-oauthlib `
            python-dateutil
          python -m playwright install chromium

      - name: Install deps (Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          python -m pip install -U pip
          python -m pip install --upgrade \
            playwright \
            google-api-python-client \
            google-auth-httplib2 \
            google-auth-oauthlib \
            python-dateutil
          python -m playwright install --with-deps chromium

      # ---------- DEBUG IP ----------
      - name: Debug – IP publique
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          try {
            $ip = (Invoke-RestMethod 'https://api.ipify.org?format=json').ip
            Write-Host "IP publique du job: $ip"
          } catch { Write-Host "IP inconnue: $($_.Exception.Message)" }

      # ---------- SYNC ----------
      - name: Lancer la synchro Playwright -> Google Calendar (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path screenshots | Out-Null
          & "$env:pythonLocation\python.exe" .\pronote_playwright_to_family_mo.py

      - name: Lancer la synchro Playwright -> Google Calendar (Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p screenshots
          python ./pronote_playwright_to_family_mo.py

      # ---------- ARTIFACTS ----------
      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: screenshots/*
          retention-days: 5
